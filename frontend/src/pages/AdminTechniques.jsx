import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import {
Â  Box,
Â  Button,
Â  Input,
Â  Textarea,
Â  VStack,
Â  HStack, // ðŸš¨ Importado para la nueva estructura de botones
Â  Heading,
Â  useToast,
Â  Select,
Â  Stack,
Â  Image,
} from "@chakra-ui/react";
import {
Â  fetchTecnicas,
Â  createTecnica,
Â  updateTecnica,
Â  deleteTecnica,
} from "../services/techniques";

export default function AdminTechniques() {
Â  const [tecnicas, setTecnicas] = useState([]);
Â  const [titulo, setTitulo] = useState("");
Â  const [tipo, setTipo] = useState("");
Â  const [descripcion, setDescripcion] = useState("");
Â  const [url, setUrl] = useState("");
Â  const [editId, setEditId] = useState(null);

Â  const toast = useToast();
Â  const navigate = useNavigate();
Â  // Usar el Contexto serÃ­a mejor, pero por ahora mantendremos el localStorage para el chequeo de acceso.
Â  const usuario = JSON.parse(localStorage.getItem("usuario")); 

Â  // Cargar tÃ©cnicas (solo si hay admin)
Â  const cargarTecnicas = async () => {
Â  Â  if (!usuario || usuario.tipo !== "admin") {
Â  Â  Â  navigate("/login");
Â  Â  Â  return;
Â  Â  }
Â  Â  // Tu API service para tÃ©cnicas probablemente usa el token del interceptor,
Â  Â  // por eso no necesitas pasarlo aquÃ­.
Â  Â  const data = await fetchTecnicas();
Â  Â  setTecnicas(data);
Â  };

Â  useEffect(() => {
Â  Â  cargarTecnicas();
Â  }, [usuario, navigate]); // AÃ±adimos navigate como dependencia

Â  // Crear o actualizar tÃ©cnica
Â  const handleSubmit = async () => {
Â  Â  if (!titulo || !tipo || !descripcion) {
Â  Â  Â  toast({ title: "Completa todos los campos", status: "warning", duration: 2000 });
Â  Â  Â  return;
Â  Â  }

Â  Â  if (editId) {
Â  Â  Â  const updated = await updateTecnica(editId, { titulo, tipo, descripcion, url_multimedia: url });
Â  Â  Â  if (updated) toast({ title: "TÃ©cnica actualizada", status: "success", duration: 2000 });
Â  Â  Â  setEditId(null);
Â  Â  } else {
Â  Â  Â  const created = await createTecnica({ titulo, tipo, descripcion, url_multimedia: url });
Â  Â  Â  if (created) toast({ title: "TÃ©cnica creada", status: "success", duration: 2000 });
Â  Â  }

Â  Â  setTitulo("");
Â  Â  setTipo("");
Â  Â  setDescripcion("");
Â  Â  setUrl("");
Â  Â  cargarTecnicas();
Â  };

Â  // Editar tÃ©cnica
Â  const handleEdit = (tecnica) => {
Â  Â  setEditId(tecnica.pk);
Â  Â  setTitulo(tecnica.titulo);
Â  Â  setTipo(tecnica.tipo);
Â  Â  setDescripcion(tecnica.descripcion);
Â  Â  setUrl(tecnica.url_multimedia || "");
Â  };

Â  // Eliminar tÃ©cnica
Â  const handleDelete = async (id) => {
Â  Â  const deleted = await deleteTecnica(id);
Â  Â  if (deleted) toast({ title: "TÃ©cnica eliminada", status: "info", duration: 2000 });
Â  Â  cargarTecnicas();
Â  };

Â  return (
Â  Â  <Box p={5}>
        <HStack mb={5} justify="space-between">
            <Heading>Administrar TÃ©cnicas</Heading>
            <Button colorScheme="green" onClick={() => navigate("/admin-register")}>
                Registrar Admin
            </Button>
        </HStack>
Â  Â  Â  {/* Formulario Crear/Editar */}
Â  Â  Â  <VStack spacing={3} mb={5} align="start">
Â  Â  Â  Â  <Input placeholder="TÃ­tulo" value={titulo} onChange={(e) => setTitulo(e.target.value)} />
Â  Â  Â  Â  <Select placeholder="Tipo de tÃ©cnica" value={tipo} onChange={(e) => setTipo(e.target.value)}>
Â  Â  Â  Â  Â  <option>RespiraciÃ³n Consciente</option>
Â  Â  Â  Â  Â  <option>RelajaciÃ³n Muscular Progresiva (RMP)</option>
Â  Â  Â  Â  Â  <option>MeditaciÃ³n y Mindfulness</option>
Â  Â  Â  Â  </Select>
Â  Â  Â  Â  <Textarea placeholder="DescripciÃ³n" value={descripcion} onChange={(e) => setDescripcion(e.target.value)} />
Â  Â  Â  Â  <Input placeholder="URL multimedia (opcional)" value={url} onChange={(e) => setUrl(e.target.value)} />
Â  Â  Â  Â  <Button colorScheme="teal" onClick={handleSubmit}>
Â  Â  Â  Â  Â  {editId ? "Actualizar TÃ©cnica" : "Crear TÃ©cnica"}
Â  Â  Â  Â  </Button>
Â  Â  Â  </VStack>
Â  Â  Â  {/* Listado de TÃ©cnicas */}
Â  Â  Â  <VStack spacing={3} align="stretch">
Â  Â  Â  Â  {tecnicas.map((t) => (
Â  Â  Â  Â  Â  <Box key={t.pk} p={3} borderWidth={1} borderRadius="md">
Â  Â  Â  Â  Â  Â  <Stack direction="row">
Â  Â  Â  Â  Â  Â  Â  {t.url_multimedia && (
Â  Â  Â  Â  Â  Â  Â  Â  <Image boxSize="100px" objectFit="cover" src={t.url_multimedia} alt={t.titulo} />
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </Stack>
Â  Â  Â  Â  Â  Â  <Heading size="sm">{t.titulo}</Heading>
Â  Â  Â  Â  Â  Â  <p><strong>Tipo:</strong> {t.tipo}</p>
Â  Â  Â  Â  Â  Â  <p>{t.descripcion}</p>
Â  Â  Â  Â  Â  Â  {t.url_multimedia && (
Â  Â  Â  Â  Â  Â  Â  <p>
Â  Â  Â  Â  Â  Â  Â  Â  <a href={t.url_multimedia} target="_blank" rel="noreferrer">Ver multimedia</a>
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  <HStack mt={2} spacing={2}>
Â  Â  Â  Â  Â  Â  Â  <Button size="sm" colorScheme="yellow" onClick={() => handleEdit(t)}>Editar</Button>
Â  Â  Â  Â  Â  Â  Â  <Button size="sm" colorScheme="red" onClick={() => handleDelete(t.pk)}>Eliminar</Button>
Â  Â  Â  Â  Â  Â  </HStack>
Â  Â  Â  Â  Â  </Box>
Â  Â  Â  Â  ))}
Â  Â  Â  </VStack>
Â  Â  </Box>
Â  );
}